{"version":3,"sources":["logo.svg","components/Navbar.js","components/TextForm.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","props","react_default","a","createElement","Fragment","id","className","href","MyNavTitle","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","aria-current","onClick","setMode","btnText","role","placeholder","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","SetText","rows","value","onChange","myValue","console","log","target","toUpperCase","toLowerCase","About","style","mode","aria-labelledby","data-bs-parent","defaultProps","App","document","getElementById","color","backgroundColor","darkMode","setdarkMode","_useState3","_useState4","setBtnText","ToggleStyle","body","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.0ca9b9ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\nimport { useState } from 'react';\r\n\r\nexport default function Navbar(props) {\r\n\r\n  return (\r\n    \r\n    <>\r\n           {/* background-color: #0c2b40eb; */}\r\n       {/* className=\" navbar navbar-dark navbar-expand-lg bg-dark\" */}\r\n      <nav id=\"myNav\" className=\" navbar navbar-dark navbar-expand-lg bg-dark\" >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand fs-5  \" href=\"#\">\r\n            {props.MyNavTitle}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#\">\r\n                  About\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Contact\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n              <button className=\"btn btn-outline-primary\" onClick={props.setMode}  type=\"submit\" >\r\n                {props.btnText}\r\n              </button>\r\n              </li>\r\n\r\n\r\n            </ul>\r\n            <form className=\"d-flex\" role=\"search\">\r\n            \r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button>\r\n             \r\n\r\n             \r\n\r\n\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  MyNavTitle: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  MyNavTitle : 'Set title Here'\r\n}\r\n","import { useState } from \"react\";\r\nimport React from \"react\";\r\n\r\nexport default function TextForm() {\r\n\r\n  const handleUpperCase = () =>{\r\n    let a = text.toUpperCase()\r\n    SetText(a)\r\n  }\r\n\r\n  const handleLowerCase = () =>{\r\n    let a = text.toLowerCase()\r\n    SetText(a)\r\n  }\r\n\r\n\r\n  const handleOnChange = (myValue) =>{\r\n    console.log(\"Onchange !!!\")\r\n    SetText(myValue.target.value)\r\n    \r\n  }\r\n\r\n  const ClearText = () =>{\r\n    console.log(\"Cleared !!!!\")\r\n    SetText('')\r\n  }\r\n  \r\n  const [text, SetText] = useState('Enter Your Text here ')\r\n  // text = \"Helloo\" // wrong way to change the state\r\n  // SetText(\"mY tEXT\") // CORRECT WAY\r\n  return (\r\n    <>\r\n      <h1><span className=\"badge bg-secondary my-3\">Describe Yourself Below</span></h1>\r\n\r\n      <div className=\"mb-4\">\r\n        \r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"exampleFormControlTextarea1\"\r\n          rows=\"6\"\r\n          value={text}\r\n          onChange={handleOnChange}\r\n        ></textarea>\r\n      </div>\r\n      <button type=\"button\" className=\"btn btn-primary mx-2 my-2 \"onClick={handleUpperCase}>Convert To UpperCase</button>\r\n      <button type=\"button\" className=\"btn btn-primary mx-2 my-2 \" onClick={handleLowerCase}>Convert To LowerCase</button>\r\n      <button type=\"button\" className=\"btn btn-dark mx-2 my-2\" onClick={ClearText}>Clear Text</button>\r\n      <hr></hr>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nexport default function About(props) {\r\n  //  const [myStyle, setMyStyle] = useState({\r\n  //   color : \"black\",\r\n  //   backgroundColor: \"white\"\r\n  // })\r\n\r\n  // const [btnText,setBtnText] = useState(\"Enable Dark Mode\")\r\n  \r\n  // const changeStyle = () =>{\r\n  //   if (myStyle.color == 'black') {\r\n  //     setMyStyle({\r\n  //       color: 'white',\r\n  //       backgroundColor: 'black'\r\n  //     })\r\n  //     setBtnText(\"Enable Light Mode\")\r\n\r\n  //   }else{ \r\n  //     setMyStyle({\r\n  //       color : \"black\",\r\n  //     backgroundColor: \"white\"\r\n  //   })\r\n  //   setBtnText(\"Enable Dark Mode\")\r\n\r\n  //   }\r\n  // }\r\n  \r\n  \r\n  return (\r\n    <div className=\"accordion\" id=\"accordionExample\">\r\n      <div className=\"accordion-item style={props.style}\">\r\n        \r\n        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n          \r\n          <button\r\n            className= 'accordion-button ' \r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#collapseOne\"\r\n            aria-expanded=\"true\"\r\n            aria-controls=\"collapseOne\"\r\n            style={props.mode}\r\n            \r\n          >\r\n            Accordian Item #1\r\n          </button>\r\n       \r\n       \r\n        </h2>\r\n        <div\r\n          id=\"collapseOne\"\r\n          className=\"accordion-collapse collapse show\"\r\n          aria-labelledby=\"headingOne\"\r\n          data-bs-parent=\"#accordionExample\"\r\n        >\r\n          <div className=\"accordion-body\"  style={props.mode}>\r\n            <strong>This is the first item's accordion body.</strong> It is\r\n            shown by default, until the collapse plugin adds the appropriate\r\n            classes that we use to style each element. These classes control the\r\n            overall appearance, as well as the showing and hiding via CSS\r\n            transitions. You can modify any of this with custom CSS or\r\n            overriding our default variables. It's also worth noting that just\r\n            about any HTML can go within the <code>.accordion-body</code>,\r\n            though the transition does limit overflow.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n          <button\r\n            className=\"accordion-button collapsed\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#collapseTwo\"\r\n            aria-expanded=\"false\"\r\n            aria-controls=\"collapseTwo\"\r\n            style={props.mode}\r\n          >\r\n            Accordion Item #2\r\n          </button>\r\n        </h2>\r\n        <div\r\n          id=\"collapseTwo\"\r\n          className=\"accordion-collapse collapse\"\r\n          aria-labelledby=\"headingTwo\"\r\n          data-bs-parent=\"#accordionExample\"\r\n        >\r\n          <div className=\"accordion-body\"  style={props.mode}>\r\n            <strong>This is the second item's accordion body.</strong> It is\r\n            hidden by default, until the collapse plugin adds the appropriate\r\n            classes that we use to style each element. These classes control the\r\n            overall appearance, as well as the showing and hiding via CSS\r\n            transitions. You can modify any of this with custom CSS or\r\n            overriding our default variables. It's also worth noting that just\r\n            about any HTML can go within the <code>.accordion-body</code>,\r\n            though the transition does limit overflow.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n          <button\r\n            className=\"accordion-button collapsed\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#collapseThree\"\r\n            aria-expanded=\"false\"\r\n            aria-controls=\"collapseThree\"\r\n            style={props.mode}\r\n          >\r\n            Accordion Item #3\r\n          </button>\r\n          \r\n        </h2>\r\n        <div\r\n          id=\"collapseThree\"\r\n          className=\"accordion-collapse collapse\"\r\n          aria-labelledby=\"headingThree\"\r\n          data-bs-parent=\"#accordionExample\"\r\n        >\r\n          <div className=\"accordion-body\"  style={props.mode}>\r\n            <strong>This is the third item's accordion body.</strong> It is\r\n            hidden by default, until the collapse plugin adds the appropriate\r\n            classes that we use to style each element. These classes control the\r\n            overall appearance, as well as the showing and hiding via CSS\r\n            transitions. You can modify any of this with custom CSS or\r\n            overriding our default variables. It's also worth noting that just\r\n            about any HTML can go within the <code>.accordion-body</code>,\r\n            though the transition does limit overflow.\r\n          </div>\r\n        \r\n        </div>\r\n    \r\n      </div>\r\n      {/* <button className=\"btn btn-outline-primary\"  type=\"submit\" onClick={props.setMode}>\r\n               {props.btnText}\r\n        </button> */}\r\n     \r\n    </div>\r\n  );\r\n}\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport React from 'react'\n\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/About\";\nimport { useState } from \"react\";\n\nfunction App() {\n  let a = document.getElementById(\"myNav\");\n  console.log(a);\n  const [darkMode, setdarkMode] = useState({\n    color: \"black\",\n    backgroundColor: \"white\",\n  });\n  const [btnText, setBtnText] = useState(\"Enable Dark Mode\");\n\n  const ToggleStyle = () => {\n    console.log(\"clicked\");\n    if (darkMode.color == \"black\") {\n      setdarkMode({\n        color: \"white\",\n        backgroundColor: \"black\",\n      });\n      setBtnText(\"Enable Light Mode\");\n      document.body.style.backgroundColor = \"#0c2b40eb\";\n    } else {\n      setdarkMode({\n        color: \"black\",\n        backgroundColor: \"white\",\n      });\n      setBtnText(\"Enable Dark Mode\");\n      document.body.style.backgroundColor = \"white\";\n    }\n  };\n\n  return (\n    <>\n      {/* <Navbar MyNavTitle = {3} ></Navbar> */}\n      <Navbar\n        MyNavTitle=\"CodeWithArham\"\n        mode={darkMode}\n        setMode={ToggleStyle}\n        btnText={btnText}\n      ></Navbar>\n      {/* <Navbar ></Navbar> */}\n      <div className=\"container \">\n        <TextForm></TextForm>\n      </div>\n\n      <div className=\"container\">\n        <About mode={darkMode} setMode={ToggleStyle} btnText={btnText}></About>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}